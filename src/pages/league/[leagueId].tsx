import { Button, Flex, Grid, Table, Text, Title } from '@mantine/core';
import type { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import Link from 'next/link';
import { MatchCard } from '~/components/LeaguePage/MatchCard';
import { StatCard } from '~/components/LeaguePage/StatCard';
import { api } from '~/utils/api';
import { getPlayerScore } from '~/utils/scoreCalculations';
import { generateSSGHelper } from '~/utils/ssgHelper';

type PlayersPageProps = {
  leagueId: string;
};

type Stats = {
  name: string;
  playerName: string;
  score: string;
};

const LeaguePage: NextPage<PlayersPageProps> = ({ leagueId }) => {
  const { data: league } = api.league.findLeague.useQuery({
    leagueId,
  });

  if (!league) return <div>Error while fetching data...</div>;

  const rows = league.players.map((player, index) => {
    const {
      goalsScored,
      goalsScoredAgainst,
      regularWins,
      otWins,
      regularLosses,
      otLosses,
    } = getPlayerScore(player);
    return (
      <tr key={`table_row_for_${player.id}`}>
        <td>{index + 1}</td>
        <td>
          {player.firstName} {player.lastName}
        </td>
        <td>
          {regularWins}-{otWins}-{otLosses}-{regularLosses}
        </td>
        <td>
          {goalsScored}-{goalsScoredAgainst}
        </td>
        <td>
          <Text fw={700}>{player.mmr}</Text>
        </td>
      </tr>
    );
  });

  const stats: Stats[] = [
    { name: 'Winrate', score: '78%', playerName: 'Jan Motak' },
    { name: 'Average goals', score: '4.2', playerName: 'Peter Smith' },
    { name: 'Average goals against', score: '1.5', playerName: 'Mike Yard' },
    { name: 'Largest winning streak', score: '8', playerName: 'Jan Motak' },
    { name: 'Leader', score: '10-8', playerName: 'Jan Motak' },
  ];

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Flex gap={10} align="center">
          <Title order={1} c="white">
            League {league.name}
          </Title>
        </Flex>
        <Text fz="sm">
          Main information page with all the information about the league
        </Text>

        <Grid pt="2rem" gutter="xl">
          <Grid.Col md={12} lg={5}>
            <Flex direction="column" gap="0.8rem">
              <Title order={4}>Standings</Title>
              <Table striped>
                <thead>
                  <tr>
                    <th>Position</th>
                    <th>Name</th>
                    <th>W/OTW/OTL/L</th>
                    <th>Score</th>
                    <th>MMR</th>
                  </tr>
                </thead>
                <tbody>{rows}</tbody>
              </Table>
              <Button
                variant="light"
                color="gray.4"
                sx={{ alignSelf: 'flex-end', marginTop: 15 }}
              >
                Add match
              </Button>
            </Flex>
          </Grid.Col>

          <Grid.Col md={6} lg={4}>
            <Title order={4} pb="0.6rem">
              Statistics
            </Title>
            <Flex gap={10} wrap="wrap">
              {stats.map(stat => (
                <StatCard key="test" stat={stat} />
              ))}
            </Flex>
          </Grid.Col>
          <Grid.Col md={6} lg={3}>
            <Flex direction="column" gap="sm" w="100%">
              <Title order={4}>Match history</Title>
              {league?.matches.map(match => (
                <MatchCard key={`match_card_${match.id}`} matchInfo={match} />
              ))}

              <Link
                href={`/history/${leagueId}`}
                style={{ textDecoration: 'none' }}
              >
                <Text c="blue.4" td="none" fz="sm">
                  For more matches click this link
                </Text>
              </Link>
            </Flex>
          </Grid.Col>
        </Grid>
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps = async context => {
  const ssg = generateSSGHelper();

  const leagueId = context.params?.leagueId;

  if (typeof leagueId !== 'string') throw new Error('No leagueId');

  await ssg.league.findLeague.prefetch({ leagueId });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      leagueId,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: 'blocking' };
};

export default LeaguePage;
