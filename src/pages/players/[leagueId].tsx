import { ActionIcon, Flex, Grid, Text, Title } from '@mantine/core';
import { useDisclosure } from '@mantine/hooks';
import { modals } from '@mantine/modals';
import { IconPlus } from '@tabler/icons-react';

import type { GetStaticProps, NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import { PlayerCard } from '~/components/PlayersPage/PlayerCard';
import { PlayerModal } from '~/components/PlayersPage/PlayerModal';
import type { PlayerFormValues } from '~/components/PlayersPage/PlayerModal.types';
import { usePlayerMutations } from '~/hooks/mutations/usePlayerMutations';
import { api } from '~/utils/api';
import { generateSSGHelper } from '~/utils/ssgHelper';

type PlayersPageProps = {
  leagueId: string;
};

const League: NextPage<PlayersPageProps> = ({ leagueId }) => {
  const [editedPlayerId, setEditedPlayerId] = useState<string>('');
  const [opened, { open, close }] = useDisclosure(false);
  const { createPlayer, updatePlayer, deletePlayer } =
    usePlayerMutations(close);
  const { data: league } = api.league.findLeague.useQuery({
    leagueId,
  });

  if (!league) return <div>Error while fetching data...</div>;

  const openConfirmModal = (name: string, id: string) =>
    modals.openConfirmModal({
      title: 'Please confirm your action',
      children: (
        <Text size="sm">Are you sure you want to delete player {name}</Text>
      ),
      labels: { confirm: 'Confirm', cancel: 'Cancel' },
      confirmProps: { color: 'red' },
      onConfirm: () => {
        deletePlayer.mutate({ id });
      },
    });

  const modalClose = () => {
    close();
    setEditedPlayerId('');
  };

  const handleCreateSubmit = (playerValues: PlayerFormValues) => {
    createPlayer.mutate({ ...playerValues, leagueId });
  };

  const handleEditSubmit = (playerValues: PlayerFormValues) => {
    updatePlayer.mutate({ id: editedPlayerId, ...playerValues });
  };

  const handlePlayerEditClick = (playerId: string) => {
    const player = league.players.find(p => p.id === playerId);
    if (!player) return;
    setEditedPlayerId(player.id);
    open();
  };

  const editedPlayer = league.players.find(p => p.id === editedPlayerId);

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Flex gap={10} align="center">
          <Title order={1} c="white">
            Players
          </Title>
          <ActionIcon variant="light" color="gray.1" radius="md" onClick={open}>
            <IconPlus size="1rem" />
          </ActionIcon>
        </Flex>

        <Text fz="sm">List of players in league and their administration</Text>
        <Grid sx={{ paddingTop: '2rem' }}>
          {league.players.map(player => (
            <Grid.Col md={6} lg={3} key={`card-${player.id}`}>
              <PlayerCard
                firstName={player.firstName}
                lastName={player.lastName}
                id={player.id}
                onEditClick={handlePlayerEditClick}
                onDeleteClick={openConfirmModal}
              />
            </Grid.Col>
          ))}
        </Grid>
        {opened && (
          <PlayerModal
            opened={opened}
            editedPlayer={editedPlayer}
            close={modalClose}
            handleSubmit={editedPlayer ? handleEditSubmit : handleCreateSubmit}
            title={editedPlayer ? 'Edit Player' : 'Add Player'}
          />
        )}
      </main>
    </>
  );
};

export const getStaticProps: GetStaticProps = async context => {
  const ssg = generateSSGHelper();

  const leagueId = context.params?.leagueId;

  if (typeof leagueId !== 'string') throw new Error('No leagueId');

  await ssg.league.findLeague.prefetch({ leagueId });

  return {
    props: {
      trpcState: ssg.dehydrate(),
      leagueId,
    },
  };
};

export const getStaticPaths = () => {
  return { paths: [], fallback: 'blocking' };
};

export default League;
